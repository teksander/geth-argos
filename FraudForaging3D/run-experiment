#!/bin/bash
# Iterate over experimental settings and start experiments
source experimentconfig.sh
DATAFOLDER="$EXPERIMENTFOLDER/results/data"

##################################################################################
### Set a value for any parameter in experimentconfig.sh
### USAGE:   config "parameter" value
### EXAMPLE: config "NUMROBOTS" 10 
config() {
	sed -i "s/^export ${1}=.*/export ${1}=${2}/" experimentconfig.sh
}

##################################################################################
### Set a value for any parameter in the loop_params.py dictionaries
### USAGE:   loopconfig "dictionary" "parameter" value
### EXAMPLE: loopconfig "patches" "radius" 0.05 
loopconfig() {
	sed -i "/\['${1}'\]\['${2}'\]/ s/=.*/= ${3}/" loop_functions/loop_function_params.py
}

controlconfig() {
	sed -i "/\['${1}'\]\['${2}'\]/ s/=.*/= ${3}/" controllers/controller_params.py
}

##################################################################################
### EXAMPLE: copy "test116_patchy/20_blockchain1"
copy() {
	# Collect the config from results
	cp $DATAFOLDER/experiment_${1}/001/experimentconfig.sh .
	cp $DATAFOLDER/experiment_${1}/001/controller_params.py controllers/
	cp $DATAFOLDER/experiment_${1}/001/loop_function_params.py loop_functions/
}

##################################################################################
### EXAMPLE: import "test116_patchy/20_blockchain1"
import() {
	# Collect the config from results
	SSHHOST="eksander@esme"
	SSHSOCKET=~/.ssh/$SSHHOST
	
	ssh -M -f -N -o ControlPath=$SSHSOCKET $SSHHOST
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/experimentconfig.sh .
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/controller_params.py controllers/
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/loop_function_params.py loop_functions/
	ssh -S $SSHSOCKET -O exit $SSHHOST
}

##################################################################################
### EXAMPLE: run "test116_patchy/20_blockchain1"
run() {

	# Configure experiment
	. experimentconfig.sh

	for REP in $(seq 1 ${REPS}); do

		max_attempts=5
		success=false
		for att in $(seq 1 ${max_attempts}); do

			# Perform experiment
			. starter -r -sz
		
			exit_status=$?  

			if [ $exit_status -eq 0 ]; then
				bash collect-logs ${1}
				success=true
				break
			fi
		done

		if [ $success = false ]; then
			echo "starter failed after $max_attempts attempts."
			exit 1  
        fi

	done
}

# DEFINE AND RUN EXPERIMENT
config "NOTES" "\"longrun with fixed number of byzantines\""
config "REPS" 10
EXP="long_norec"


# ################ K=3, inf ################
config "MAXUNVCLUSTER" 3
# config "INFLATIONR" 0

CFG="safety"
config "ATTACK" "\"Safety"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="liveness"
config "ATTACK" "\"Liveness"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="combined"
config "ATTACK" "\"Combined"\"
run    "${EXP}/${CFG}" ${1}
wait

# ################ K=1, inf ################
config "MAXUNVCLUSTER" 1

CFG="safety_K1"
config "ATTACK" "\"Safety"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="liveness_K1"
config "ATTACK" "\"Liveness"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="combined_K1"
config "ATTACK" "\"Combined"\"
run    "${EXP}/${CFG}" ${1}
wait

############### NO INFLATION ################
config "MAXUNVCLUSTER" 3
config "INFLATIONR" 0

CFG="safety_noinf"
config "ATTACK" "\"Safety"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="liveness_noinf"
config "ATTACK" "\"Liveness"\"
run    "${EXP}/${CFG}" ${1}
wait

CFG="combined_noinf"
config "ATTACK" "\"Combined"\"
run    "${EXP}/${CFG}" ${1}
wait